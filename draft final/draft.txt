/**
 * Debug
 */
const gui = new dat.GUI()

/**
 * Base
 */
// Canvas
const canvas = document.querySelector('canvas.webgl')

// Scene
const scene = new THREE.Scene()

/**
 * Object
 */
const geometry = new THREE.BoxGeometry(8, 0.25, 8, 8, 1, 8)
const material = new THREE.MeshBasicMaterial({ color: 0xe8e8e8})
const mesh = new THREE.Mesh(geometry, material)
mesh.rotation.x = Math.PI /2
scene.add(mesh)

// Debug
const parameters = {
  spin : () => {
      gsap.to(mesh.rotation, {duration : 1, y: mesh.rotation.y + 10})
  }
}
gui
  .add(mesh.position, 'x')
  .min(-3)
  .max(3)
  .step(0.01)
  .name('droite gauche')

gui
  .add(mesh.position, 'y')
  .min(-Math.PI)
  .max(Math.PI)
  .step(0.01)
  .name('devant derriÃ¨re')

gui
  .add(mesh.position, 'z')
  .min(-3)
  .max(3)
  .step(0.01)
  .name('x')

gui 
  .add(parameters,'spin')


gui
  .add(mesh, 'visible')

gui
  .add(material, 'wireframe')

gui
  .addColor(material, 'color')

gui
  .add



/**
 * Sizes
 */
const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
}
//prevent the resizing : native javascript

window.addEventListener('resize', () => {

    // Update sizes
    sizes.width = window.innerWidth
    sizes.height = window.innerHeight

    // Update camera
    camera.aspect = sizes.width / sizes.height
    camera.updateProjectionMatrix()

    // Update renderer and canvas
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
})

window.addEventListener('dblclick', () =>{
    const fullscreenElement = document.fullscreenElement || document.webkitfullscreenElement
    if (!fullscreenElement){
        if(canvas.requestFullscreen)
        {
            canvas.requestFullscreen()
        }
        else if(canvas.webkitRequestFullscreen)
        {
            canvas.webkitRequestFullscreen()
        }
    }else{
        if(document.exitFullscreen)
        {
            document.exitFullscreen()
        }
        else if(document.webkitExitFullscreen)
        {
            document.webkitExitFullscreen()
        }
    }
})

/**
 * Camera
 */
// Base camera
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)
camera.position.z = 7
camera.lookAt(mesh)
scene.add(camera)

// Controls
const controls = new OrbitControls(camera, canvas)
controls.enableDamping = true

/**
 * Renderer
 */
const renderer = new THREE.WebGLRenderer({
    canvas: canvas
})

renderer.setSize(sizes.width, sizes.height)


/**
 * Animate
 */
const clock = new THREE.Clock()

const tick = () =>
{
    const elapsedTime = clock.getElapsedTime()

    // Update controls
    controls.update()

    // Render
    renderer.render(scene, camera)

    // Call tick again on the next frame
    window.requestAnimationFrame(tick)
}

tick()


// const material = new THREE.MeshStandardMaterial()
// material.metalness = 0.45
// material.roughness = 0.65

// gui 
//     .add(material, 'metalness')
//     .min(0)
//     .max(1)
//     .step(0.001)
//     .name('metalness')
// gui
//     .add(material, 'roughness')
//     .min(0)
//     .max(1)
//     .step(0.001)
//     .name('roughness')
